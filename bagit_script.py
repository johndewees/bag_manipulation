from logging import error
import os
import shutil
from bdbag import bdbag_api
from bagit import BagValidationError
from bdbag.bdbagit import BaggingInterruptedError

def extract_bags():
    for file in os.listdir(path = 'bags_zip'):
        #converts a zipped bag into a bag
        bdbag_api.extract_bag('bags_zip/' + file, output_path = 'bags_extract', temp=False)
    print('Bag Extraction Complete')

def validate_bags():
    error_log = open('validation_error_log.txt', 'a')
    for directory in os.listdir(path = 'bags_extract'):
        #attempts to validate bags and logs any problem directories that raised errors
        try:
            bdbag_api.validate_bag('bags_extract/' + directory, fast = False)
        except BagValidationError:
            error_log.write(str('Bag Validation Error | Directory: ' + directory + '\n'))
        except BaggingInterruptedError:
            error_log.write('Bagging Interruped Error | Directory: ' + directory + '\n')
        except RuntimeError:
            error_log.write('Runtime Error | Directory: ' + directory + '\n')
    error_log.close()
    print('Bag Validation completed - Check error log for bags that need attention')

def process_bags():
    error_log_handle = open('validation_error_log.txt', 'r')
    error_log = error_log_handle.read()
    for directory in os.listdir(path = 'bags_extract'):
        #skips any directories that raised errors during validation
        if directory in error_log:
            continue
        else:
            #converts the bags back into normal directories, removing bagit and manifest files
            bdbag_api.revert_bag('bags_extract/' + directory)
            #moves all files in objects directory back to data directory
            for file in os.listdir(path = 'bags_extract/' + directory + '/objects'):
                shutil.move('bags_extract/' + directory + '/objects/' + file, 'bags_extract/' + directory)
            #removes unnecessary files generated by Islandora
            os.remove('bags_extract/' + directory + '/TN.jpg')
            #removes unnecesary objects directory generated by Islandora
            os.rmdir('bags_extract/' + directory + '/objects')
            #creates new bag well formed for Preservica SIP
            bdbag_api.make_bag('bags_extract/' + directory, algs = ['sha256'], metadata = {'Source-Organization' : 'University of Rochester', 'Contact-Name' : 'John Dewees', 'Contact-Email' : 'john.dewees@rochester.edu'})
            #zips the bag to prepare for ingest into Preservica
            bdbag_api.archive_bag('bags_extract/' + directory, bag_archiver = 'zip')
    error_log_handle.close()
    print('Bags prepared for Preservica SIP ingest')

# extract_bags()
# validate_bags()
# process_bags()
